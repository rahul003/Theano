=================
Automatic updates
=================

.. note:
   Proposed 2010 01 13
   Done 2010 04 ??


The Module version of RandomStreams could arrange for the automatic update of
certain inputs (such as the random number generators) at the time of make(), so
that certain *obvious* patterns would work:

>>> rs = RandomStreams()
>>> u = rs.uniform(...)
>>> f = theano.function([], u)
>>> assert not numpy.all(f() == f())

Unfortunately, with shared variables this does not work!  Function needs to be
told which shared variables to update.  The current workaround is to do this:

>>> theano.function([], u, updates=rs.updates())

or this:

>>> theano.function([], u, updates=[u.update])

But it is all too easy to forget to do either of these workarounds, and
accidentally run a program whose random numbers are the same in every call.


Proposal
========

Add an optional `default_update` attribute to Shared variables. This will be
consulted by function.  If no update expression is given for this variable in
the updates list, then this default will be inserted.  Note well: a value of None for the
default_update means to update with a value of None!  To have no default update,
make sure that the default_update attribute is not defined.

Add an optional argument to function: `no_default_updates`.  This argument defaults to
False, which results in the current semantics.
A True value here would mean "ignore all default_update expressions", and this
would be useful for disabling implicit behaviour.
A list of shared variables here would mean to ignore the
default_update_expressions in these specific variables.


Alternatives
============

Consider a singleton 'NOUPDATE' object that can be used as a pseudo-expression
in the update list.  This doesn't introduce a new keyword argument, which makes
it slightly more awkward to document in theano.function.  Really though, I have
no strong feelings between this and the no_updates paramter.

